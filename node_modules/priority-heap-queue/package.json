{
  "_args": [
    [
      {
        "raw": "priority-heap-queue",
        "scope": null,
        "escapedName": "priority-heap-queue",
        "name": "priority-heap-queue",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/dianale/cs194-GAV"
    ]
  ],
  "_from": "priority-heap-queue@latest",
  "_id": "priority-heap-queue@0.1.3",
  "_inCache": true,
  "_location": "/priority-heap-queue",
  "_npmUser": {
    "name": "tristanls",
    "email": "tristan.slominski@gmail.com"
  },
  "_npmVersion": "1.2.32",
  "_phantomChildren": {},
  "_requested": {
    "raw": "priority-heap-queue",
    "scope": null,
    "escapedName": "priority-heap-queue",
    "name": "priority-heap-queue",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/priority-heap-queue/-/priority-heap-queue-0.1.3.tgz",
  "_shasum": "05ba47d2465440a17672931232f93d79ad2d53ee",
  "_shrinkwrap": null,
  "_spec": "priority-heap-queue",
  "_where": "/Users/dianale/cs194-GAV",
  "author": {
    "name": "Tristan Slominski",
    "email": "tristan.slominski@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/tristanls/node-priority-heap-queue/issues"
  },
  "dependencies": {
    "binary-heap": "1.1.0"
  },
  "description": "Priority queue implemented using a heap",
  "devDependencies": {
    "nodeunit": "0.8.1"
  },
  "directories": {},
  "dist": {
    "shasum": "05ba47d2465440a17672931232f93d79ad2d53ee",
    "tarball": "https://registry.npmjs.org/priority-heap-queue/-/priority-heap-queue-0.1.3.tgz"
  },
  "homepage": "https://github.com/tristanls/node-priority-heap-queue#readme",
  "keywords": [
    "queue",
    "priority queue",
    "heap",
    "datastructure",
    "data structure"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tristanls",
      "email": "tristan.slominski@gmail.com"
    }
  ],
  "name": "priority-heap-queue",
  "optionalDependencies": {},
  "readme": "# priority-heap-queue\n\n_Stability: 1 - [Experimental](https://github.com/tristanls/stability-index#stability-1---experimental)_\n\nPriority queue.\n\n## Installation\n\n    npm install priority-heap-queue\n\n## Tests\n\n    npm test\n\n## Usage\n\n```javascript\nvar PriorityQueue = require('priority-heap-queue');\n\nvar maxQueue = new PriorityQueue();\nvar minQueue = new PriorityQueue({kind: 'min'});\n```\n\n## Overview\n\n_TODO_\n\n## Documentation\n\n### PriorityQueue\n\nA JavaScript implementation of a priority queue using heap data structure.\n\n*WARNING*: This implementation uses 1-indexed arrays (instead of 0-indexed) arrays. \n\n#### PriorityQueue.heapDecreaseKey(array, index, value)\n\n  * `array`: _Array_ 1-indexed array storing the heap structure\n  * `index`: _Integer_ index of the key to decrease\n  * `value`: _Integer_ the value to decrease the key to\n\nSets the value of the key at `index` to `value` and ensures heap property is maintained as a result.\n\n#### PriorityQueue.heapIncreaseKey(array, index, value)\n\n  * `array`: _Array_ 1-indexed array storing the heap structure\n  * `index`: _Integer_ index of the key to increase\n  * `value`: _Integer_ the value to increase the key to\n\nSets the value of the key at `index` to `value` and ensures heap property is maintained as a result.\n\n#### PriorityQueue.maxHeapify(array, index, heapSize)\n\n  * `array`: _Array_ 1-indexed array storing the heap structure\n  * `index`: _Integer_ the array index to start maxHeapify procedure on\n  * `heapSize`: _Integer_ heap size\n\nEnsures that the max-heap property is satisfied for the sub-tree rooted at `index` of the array representing a binary tree.\n\n#### PriorityQueeu.minHeapify(array, index, heapSize)\n\n  * `array`: _Array_ 1-indexed array storing the heap structure\n  * `index`: _Integer_ the array index to start maxHeapify procedure on\n  * `heapSize`: _Integer_ heap size\n\nEnsures that the min-heap property is satisfied for the sub-tree rooted at `index` of the array representing a binary tree.\n\n#### new PriorityQueue(options)\n\n  * `options`:\n    * `kind`: _String_ One of `min`, `max` (default: `max`)\n\nCreates a new PriorityQueue.\n\n#### priorityQueue.decreaseKey(index, value)\n\n  * `index`: _Integer_ index of the key to decrease\n  * `value`: _Integer_ the value to decrease the key to\n\nSets the value of the key at `index` to `value` and ensures heap property is maintained as a result.\n\n#### priorityQueue.extractMax()\n\nRemoves and returns the element with the largest key.\n\n#### priorityQueue.extractMin()\n\nRemoves and returns the element with the smallest key.\n\n#### priorityQueue.increaseKey(index, value)\n\n  * `index`: _Integer_ index of the key to increase\n  * `value`: _Integer_ the value to increase the key to\n\nSets the value of the key at `index` to `value` and ensures heap property is maintained as a result.\n\n#### priorityQueue.insert(key, element)\n\n  * `key`: _Integer_ key of the element to be inserted\n  * `element`: _Any_ element to associate with the key\n\nInserts the `element` into the priority queue at the specified `key`.\n\n#### priorityQueue.maximum()\n\nReturns the element with the largest key. The element is _not_ removed.\n\n#### priorityQueue.minimum()\n\nReturns the element with the smallest key. The element is _not_ removed.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/tristanls/node-priority-heap-queue.git"
  },
  "scripts": {
    "test": "node scripts/test.js"
  },
  "version": "0.1.3"
}
